"use strict";(self.webpackChunkrestyle=self.webpackChunkrestyle||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Getting started","href":"/restyle/","docId":"getting-started"},{"type":"category","label":"Fundamentals","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Defining your theme","href":"/restyle/fundamentals/defining-your-theme","docId":"fundamentals/defining-your-theme"},{"type":"link","label":"Colors","href":"/restyle/fundamentals/colors","docId":"fundamentals/colors"},{"type":"link","label":"Spacing","href":"/restyle/fundamentals/spacing","docId":"fundamentals/spacing"},{"type":"link","label":"Accessing the theme","href":"/restyle/fundamentals/accessing-the-theme","docId":"fundamentals/accessing-the-theme"},{"type":"link","label":"Variants","href":"/restyle/fundamentals/variants","docId":"fundamentals/variants"},{"type":"link","label":"Breakpoints","href":"/restyle/fundamentals/breakpoints","docId":"fundamentals/breakpoints"},{"type":"link","label":"Responsive values","href":"/restyle/fundamentals/responsive-values","docId":"fundamentals/responsive-values"},{"type":"link","label":"Overriding styles","href":"/restyle/fundamentals/overriding-styles","docId":"fundamentals/overriding-styles"},{"type":"link","label":"Restyle functions","href":"/restyle/fundamentals/restyle-functions","docId":"fundamentals/restyle-functions"},{"type":"category","label":"Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Predefined components","href":"/restyle/fundamentals/components/predefined-components","docId":"fundamentals/components/predefined-components"},{"type":"link","label":"Custom components","href":"/restyle/fundamentals/components/custom-components","docId":"fundamentals/components/custom-components"}],"href":"/restyle/fundamentals/components"}],"href":"/restyle/fundamentals"},{"type":"category","label":"Guides","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Implementing dark mode","href":"/restyle/guides/dark-mode","docId":"guides/dark-mode"},{"type":"link","label":"Running the fixture app","href":"/restyle/guides/fixture-app","docId":"guides/fixture-app"},{"type":"link","label":"Getting Setup With the Shopify Design System","href":"/restyle/guides/shopify-design-system","docId":"guides/shopify-design-system"},{"type":"link","label":"Migrating to Restyle V2","href":"/restyle/guides/migrating-to-v2","docId":"guides/migrating-to-v2"}],"href":"/restyle/guides"}]},"docs":{"fundamentals/accessing-the-theme":{"id":"fundamentals/accessing-the-theme","title":"Accessing the theme","description":"If you need to manually access the theme outside of a component created with Restyle, use the useTheme hook:","sidebar":"docs"},"fundamentals/breakpoints":{"id":"fundamentals/breakpoints","title":"Breakpoints","description":"Breakpoints are defined as minimum widths (inclusive) for different target screen sizes where we want to apply differing styles. Consider giving your breakpoints names that give a general idea of the type of device the user is using. Breakpoints can be defined by either a single value (width) or an object containing both width and height:","sidebar":"docs"},"fundamentals/colors":{"id":"fundamentals/colors","title":"Colors","description":"When working with colors in a design system a common pattern is to have a palette including a number of base colors with darker and lighter shades, see for example the Polaris Color Palette.","sidebar":"docs"},"fundamentals/components/custom-components":{"id":"fundamentals/components/custom-components","title":"Custom components","description":"If you want to create your own component similar to Box or Text, but decide","sidebar":"docs"},"fundamentals/components/predefined-components":{"id":"fundamentals/components/predefined-components","title":"Predefined components","description":"This library comes with predefined functions to create a Box and Text component, as seen in action in the introductory example. These come as functions instead of ready-made components to give you a chance to provide the type of your theme object. Doing this will make all props that map to theme values have proper types configured, based on what\'s available in your theme.","sidebar":"docs"},"fundamentals/defining-your-theme":{"id":"fundamentals/defining-your-theme","title":"Defining your theme","description":"Any project using this library should have a global theme object which specifies a set of values for spacing, colors, breakpoints, and more. These values are made available to Restyle components, so that you can for example write backgroundColor=\\"cardPrimary\\" to use the named color from your theme. In fact, TypeScript enforces the backgroundColor property to only accept colors that have been defined in your theme, and autocompletes values for you in a modern editor.","sidebar":"docs"},"fundamentals/overriding-styles":{"id":"fundamentals/overriding-styles","title":"Overriding styles","description":"Any Restyle component also accepts a regular style property and will apply it after all other styles, which means that you can use this to do any overrides that you might find necessary.","sidebar":"docs"},"fundamentals/responsive-values":{"id":"fundamentals/responsive-values","title":"Responsive values","description":"Any prop powered by Restyle can optionally accept a value for each screen size, as defined by the breakpoints object in the theme:","sidebar":"docs"},"fundamentals/restyle-functions":{"id":"fundamentals/restyle-functions","title":"Restyle functions","description":"Restyle functions are the bread and butter of Restyle. They specify how props should be mapped to values in a resulting style object, that can then be passed down to a React Native component. The props support responsive values and can be mapped to values in your theme.","sidebar":"docs"},"fundamentals/spacing":{"id":"fundamentals/spacing","title":"Spacing","description":"Spacing tends to follow multiples of a given base spacing number, for example 8. We prefer using the t-shirt size naming convention, because of the scalability of it (any number of x\'s can be prepended for smaller and larger sizes):","sidebar":"docs"},"fundamentals/variants":{"id":"fundamentals/variants","title":"Variants","description":"A variant is a form of Restyle function that maps a prop into multiple other props to use with Restyle functions. A variant needs to always map to a key in the theme.","sidebar":"docs"},"getting-started":{"id":"getting-started","title":"Getting started","description":"Build a consistent, themed UI in minutes.","sidebar":"docs"},"guides/dark-mode":{"id":"guides/dark-mode","title":"Implementing dark mode","description":"Of course, no app is complete without a dark mode. Here a simple example of how you would implement it:","sidebar":"docs"},"guides/fixture-app":{"id":"guides/fixture-app","title":"Running the fixture app","description":"The fixture app serves as a playground to either learn to use Restyle, test changes to the library, or simply prototype ideas. To get it running, follow the steps below:","sidebar":"docs"},"guides/migrating-to-v2":{"id":"guides/migrating-to-v2","title":"Migrating to Restyle V2","description":"v2 of this library introduces breaking changes in the usage of the useRestyle hook.","sidebar":"docs"},"guides/shopify-design-system":{"id":"guides/shopify-design-system","title":"Getting Setup With the Shopify Design System","description":"To start using Shopify style assets we can leverage Polaris tokens. You can see all of the tokens here.","sidebar":"docs"}}}')}}]);